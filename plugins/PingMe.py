import logging
import random

import discord
from discord.ext import commands

from HuskyBot import HuskyBot
from libhusky import HuskyUtils

LOG = logging.getLogger("HuskyBot.Plugin." + __name__)


# noinspection PyMethodMayBeStatic
class PingMe(commands.Cog):
    """
    A very simple method responsible for handling cases where the bot is pinged (in non-commands).
    """

    def __init__(self, bot: HuskyBot):
        self._bot = bot
        self._config = bot.config

        LOG.info("Loaded plugin!")

    @commands.Cog.listener(name="on_message")
    async def on_ping(self, message: discord.Message):
        if not HuskyUtils.should_process_message(message):
            return

        if message.content.startswith(self._bot.command_prefix):
            return

        # hacky way to determine if a message is only a bot mention
        if message.clean_content == f"@{message.guild.me.display_name}":
            return

        if self._bot.user in message.mentions:
            await message.channel.send(self.husky_speak())

    @commands.command(name="husky", brief="Act like a husky.")
    @commands.has_permissions(manage_messages=True)
    async def be_a_husky(self, ctx: commands.Context, num: int = 1):
        """
        Generate a string of husky-like dialogue (huskyspeak) and post it to the current chat. You may control the
        number of "lines" of dialogue generated by using the "num" parameter.

        Huskyspeak is generated (more or less) by choosing a "prefix" like `ar`, `aw`, `r` or `w` and then appending a
        random number of zeroes. This isn't exactly how a husky will speak, but it's probably close enough. Maybe.
        I don't know; I'm a wolf, not a husky. Stop asking me to be a husky pls thx.

        Caveats
        -------
            1. This command may have an accident on the rug if not let out in time.
            2. This command may eat your shoes if you do not give it the attention it wants.
            3. This command may steal food from the fridge if it is not fed in time.
            4. This command may cause "zoomies" knocking over the plant on the coffee table.
            5. The above caveat is chosen randomly and you have no way of telling. You may be trying to stop the wrong
               caveat altogether. I don't know.

            6. This command may cause other nearby huskies to start talking and not shut up for at least five minutes.
            7. This command will make nearby wolves annoyed at the incessant chattering.
            8. This command will not work on Alaskan Malamutes or anything above low-content wolfdogs.
            9. This command may work unexpectedly on furries that are part-Husky. Caution is advised when running this
               command at Anthrocon or Midwest Fur Fest.

        Parameters
        ----------
            ctx  :: Discord Context <!nodoc>
            num  :: The number of lines of huskyspeak to generate.
        """
        huskies = []
        husky_quota = 500

        for _ in range(num):
            generated_husky = self.husky_speak()
            husky_quota -= len(generated_husky)

            huskies.append(self.husky_speak())

            if husky_quota <= 0:
                LOG.warning("Generated too many huskies! Preventing further generation...")
                break

        await ctx.send("\n".join(huskies))

    @staticmethod
    def husky_speak(seed=None):
        rng = random.Random(seed)
        verbs = ["oo", "roo", "woo", "awoo", "aroo"]

        word_count = random.randint(1, 5)
        words = []

        for _ in range(word_count):
            w_verbs = []
            w_length = random.randint(1, len(verbs))

            for _ in range(w_length):
                verb = ""

                mode = rng.randint(0, 4)
                if mode <= 2:
                    verb += rng.choice(["aw", "r", "w", "ar"])
                elif mode <= 3:
                    verb += rng.choice(["awr", "arw", "r", "aw"])

                verb += "o" * rng.randint(2, 3)

                w_verbs.append(verb)

            words.append("".join(w_verbs))

        return " ".join(words)[:500]


def setup(bot: HuskyBot):
    bot.add_cog(PingMe(bot))
